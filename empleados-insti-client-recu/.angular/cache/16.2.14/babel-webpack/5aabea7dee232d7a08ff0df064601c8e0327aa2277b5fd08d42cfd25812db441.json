{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class AulaService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.aulasUrl = 'api/aulas'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET aulas from the server */\n  getAulas() {\n    return this.http.get(this.aulasUrl).pipe(tap(_ => this.log('fetched aulas')), catchError(this.handleError('getAulas', [])));\n  }\n  /** GET aula by id. Return `undefined` when id not found */\n  getAulaNo404(id) {\n    const url = `${this.aulasUrl}/?id=${id}`;\n    return this.http.get(url).pipe(map(aulas => aulas[0]),\n    // returns a {0|1} element array\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n      this.log(`${outcome} aula id=${id}`);\n    }), catchError(this.handleError(`getAula id=${id}`)));\n  }\n  /** GET aula by id. Will 404 if id not found */\n  getAula(id) {\n    const url = `${this.aulasUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched aula id=${id}`)), catchError(this.handleError(`getAula id=${id}`)));\n  }\n  /* GET aulas whose name contains search term */\n  searchAulas(term) {\n    if (!term.trim()) {\n      // if not search term, return empty aula array.\n      return of([]);\n    }\n    return this.http.get(`${this.aulasUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found aulas matching \"${term}\"`) : this.log(`no aulas matching \"${term}\"`)), catchError(this.handleError('searchAulas', [])));\n  }\n  //////// Save methods //////////\n  /** POST: add a new aula to the server */\n  addAula(aula) {\n    return this.http.post(this.aulasUrl, aula, this.httpOptions).pipe(tap(newAula => this.log(`added aula w/ id=${newAula.id}`)), catchError(this.handleError('addAula')));\n  }\n  /** DELETE: delete the aula from the server */\n  deleteAula(id) {\n    const url = `${this.aulasUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted aula id=${id}`)), catchError(this.handleError('deleteAula')));\n  }\n  /** PUT: update the aula on the server */\n  updateAula(aula) {\n    return this.http.put(this.aulasUrl, aula, this.httpOptions).pipe(tap(_ => this.log(`updated aula id=${aula.id}`)), catchError(this.handleError('updateAula')));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a AulaService message with the MessageService */\n  log(message) {\n    this.messageService.add(`AulaService: ${message}`);\n  }\n  static #_ = this.ɵfac = function AulaService_Factory(t) {\n    return new (t || AulaService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AulaService,\n    factory: AulaService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","of","catchError","map","tap","MessageService","AulaService","constructor","http","messageService","aulasUrl","httpOptions","headers","getAulas","get","pipe","_","log","handleError","getAulaNo404","id","url","aulas","h","outcome","getAula","searchAulas","term","trim","x","length","addAula","aula","post","newAula","deleteAula","delete","updateAula","put","operation","result","error","console","message","add","i0","ɵɵinject","i1","i2","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\yo\\Desktop\\Proyecto final dwes\\daw_proyecto_angular_servidor-MarcoRequena\\Instituto\\src\\app\\aula.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Aula } from './aula';\nimport { MessageService } from './message.service';\n\n\n@Injectable({ providedIn: 'root' })\nexport class AulaService {\n\n  private aulasUrl = 'api/aulas';  // URL to web api\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /** GET aulas from the server */\n  getAulas(): Observable<Aula[]> {\n    return this.http.get<Aula[]>(this.aulasUrl)\n      .pipe(\n        tap(_ => this.log('fetched aulas')),\n        catchError(this.handleError<Aula[]>('getAulas', []))\n      );\n  }\n\n  /** GET aula by id. Return `undefined` when id not found */\n  getAulaNo404<Data>(id: number): Observable<Aula> {\n    const url = `${this.aulasUrl}/?id=${id}`;\n    return this.http.get<Aula[]>(url)\n      .pipe(\n        map(aulas => aulas[0]), // returns a {0|1} element array\n        tap(h => {\n          const outcome = h ? 'fetched' : 'did not find';\n          this.log(`${outcome} aula id=${id}`);\n        }),\n        catchError(this.handleError<Aula>(`getAula id=${id}`))\n      );\n  }\n\n  /** GET aula by id. Will 404 if id not found */\n  getAula(id: number): Observable<Aula> {\n    const url = `${this.aulasUrl}/${id}`;\n    return this.http.get<Aula>(url).pipe(\n      tap(_ => this.log(`fetched aula id=${id}`)),\n      catchError(this.handleError<Aula>(`getAula id=${id}`))\n    );\n  }\n\n  /* GET aulas whose name contains search term */\n  searchAulas(term: string): Observable<Aula[]> {\n    if (!term.trim()) {\n      // if not search term, return empty aula array.\n      return of([]);\n    }\n    return this.http.get<Aula[]>(`${this.aulasUrl}/?name=${term}`).pipe(\n      tap(x => x.length ?\n         this.log(`found aulas matching \"${term}\"`) :\n         this.log(`no aulas matching \"${term}\"`)),\n      catchError(this.handleError<Aula[]>('searchAulas', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new aula to the server */\n  addAula(aula: Aula): Observable<Aula> {\n    return this.http.post<Aula>(this.aulasUrl, aula, this.httpOptions).pipe(\n      tap((newAula: Aula) => this.log(`added aula w/ id=${newAula.id}`)),\n      catchError(this.handleError<Aula>('addAula'))\n    );\n  }\n\n  /** DELETE: delete the aula from the server */\n  deleteAula(id: number): Observable<Aula> {\n    const url = `${this.aulasUrl}/${id}`;\n\n    return this.http.delete<Aula>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted aula id=${id}`)),\n      catchError(this.handleError<Aula>('deleteAula'))\n    );\n  }\n\n  /** PUT: update the aula on the server */\n  updateAula(aula: Aula): Observable<any> {\n    return this.http.put(this.aulasUrl, aula, this.httpOptions).pipe(\n      tap(_ => this.log(`updated aula id=${aula.id}`)),\n      catchError(this.handleError<any>('updateAula'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a AulaService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`AulaService: ${message}`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}